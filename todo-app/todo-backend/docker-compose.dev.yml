name: todo-backend-app

services:
  # -------- development container ----
  server:
    image: todo-backend-image
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    ports:
      - 3000:3000
      # adding the root directory as a bind mount volume (otherwise, ./src depending on the structure)
      # is what allows nodemon to watch on file changes (and makes sense since volumes are reads/writes to outside world)
    volumes:
      - ".:/usr/src/app"
    # https://docs.docker.com/compose/networking/
    #  redis://SERVICE_NAME:CONTAINER_PORT
    environment:
      - REDIS_URL=redis://redis_container:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo_container:27017/the_database
  # ------------------------------------
  mongo_container:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    # Bind mount is the act of binding a file (or directory) on the host machine to a file (or directory) in the container.
    # A bind mount is done by adding a -v flag with container run. The syntax is -v FILE-IN-HOST:FILE-IN-CONTAINER.
    # -> Changes to either file will be available in the other
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      # - mongo_data:/data/db # bind mount, should punt mongo_data in gitignore file

  redis_container:
    image: redis
    ports:
      - 6378:6379
    command: ["redis-server", "--appendonly", "yes"] # Overwrite the CMD
    volumes: # Declare the volume
      - ./redis_data:/data #bind mount

  debug-helper:
    image: busybox

volumes:
  mongo_data:
  # redis_data: mounted volume requires correct entrypoint ?
