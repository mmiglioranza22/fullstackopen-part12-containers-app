services:
  web:
    image: todo-frontend-image
    build:
      context: ./todo-frontend/
      dockerfile: dev.Dockerfile
    volumes:
      # this is what enables correcly the development server, it needs to reference the directory
      # where the package.json exists
      - ./todo-frontend/:/usr/src/app
    # ports:
    #   - 5173:5173
    container_name: todo-frontend-container
    environment:
      - VITE_BACKEND_URL=http://localhost:8080/api

  server:
    image: todo-backend-image
    build:
      context: ./todo-backend/ # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    # ports:
    #   - 3000:3000
    volumes:
      - ./todo-backend/:/usr/src/app
    container_name: todo-backend-container
    environment:
      - REDIS_URL=redis://redis_container:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo_container:27017/the_database

  mongo_container:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    # Bind mount is the act of binding a file (or directory) on the host machine to a file (or directory) in the container.
    # A bind mount is done by adding a -v flag with container run. The syntax is -v FILE-IN-HOST:FILE-IN-CONTAINER.
    # -> Changes to either file will be available in the other
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      # - mongo_data:/data/db # bind mount, should punt mongo_data in gitignore file

  redis_container:
    image: redis
    ports:
      - 6378:6379
    command: ["redis-server", "--appendonly", "yes"] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data #bind mount

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro # read-only
    ports:
      - 8080:80
    container_name: reverse-proxy-todo
    depends_on:
      - web # wait for the frontend container to be started, it does not check if it is ready to receive requests !! https://docs.docker.com/compose/startup-order/
      # - server
